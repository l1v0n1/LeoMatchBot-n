import buttons
from create_bot import dp, bot
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from work_with_db import DataBaseWork
from aiogram.dispatcher.filters import Text
from handlers import viewing_questionnaires, menu, change_mode
import os
import start_bot

class AdminStates(StatesGroup):
    admin_menu = State()

    first_choice = State()

    user_to_admin = State()
    admin_to_user = State()

    mailing_choice = State()
    choise_sex = State()
    get_mail = State()
    save_mail = State()
    send_out_mail = State()

    settings = State()
    settings_choice = State()
    settings_warn = State()
    settings_block = State()
    settings_unblock = State()

    analytics = State()

'''*** –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ***'''
'''******************************************************************************************************************'''
async def admin_menu_handler(message: types.Message):
    await admin_menu_module(message)

async def admin_menu_module(msg):
    await AdminStates.first_choice.set()
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.start_admin_menu)

async def first_chocie_handler(message: types.Message):
    if message.text == 'üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)
    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)
    elif message.text == 'üóÇ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
        await AdminStates.analytics.set()
        await analytics(message)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞':
        await change_mode.change_mode_module(message)
    elif message.text == '–ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
        await AdminStates.user_to_admin.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:',
                             reply_markup=buttons.cancel_reply)
    elif message.text == '–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await AdminStates.admin_to_user.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:',
                             reply_markup=buttons.cancel_reply)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')
'''******************************************************************************************************************'''

'''*** –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ***'''
'''******************************************************************************************************************'''
async def from_user_to_admin(message: types.Message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await admin_menu_module(message)
    else:
        try:
            DataBaseWork().add_user_in_admins_table(int(message.text))
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ø—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è <b>"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"</b>!',
                                 parse_mode='HTML')
            await admin_menu_module(message)
        except:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∑–≤–∞–Ω–∏—è <b>"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"</b>! '
                                 '–í–æ–∑–º–æ–∂–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π '
                                 '–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n'
                                 '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b>',
                                 parse_mode='HTML',
                                 reply_markup=buttons.cancel_reply)
'''******************************************************************************************************************'''

'''*** –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ***'''
'''******************************************************************************************************************'''
async def from_admin_to_user(message: types.Message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await admin_menu_module(message)
    else:
        try:
            DataBaseWork().delete_user_from_admins_table(int(message.text))
            await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ–ø—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è <b>"–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"</b>!',
                                 parse_mode='HTML')
            await admin_menu_module(message)
        except:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∑–≤–∞–Ω–∏—è <b>"–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"</b>! '
                                 '–í–æ–∑–º–æ–∂–Ω–æ id –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π '
                                 '–∏–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –±—ã–ª –ø–æ–Ω–∏–∂–µ–Ω!\n\n'
                                 '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b>',
                                 parse_mode='HTML',
                                 reply_markup=buttons.cancel_reply)
'''******************************************************************************************************************'''


'''*** –ú–µ–Ω—é –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ***'''
'''******************************************************************************************************************'''
async def mailing_choice(message: types.Message):
    if message.text == 'üîî –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        DataBaseWork().set_data_in_table('mailing_to', '–í—Å–µ–º', message.from_user.id, 'admins')
        await AdminStates.get_mail.set()
        await message.answer('–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ (–∏/–∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º) –¥–ª—è –±—É–¥—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ '
                             '–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.\n\n'
                             '‚ö†Ô∏è –ü—Ä–∏—Å—ã–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –æ –µ–≥–æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.',
                             reply_markup=buttons.cancel_reply,
                             parse_mode='HTML')
    elif message.text == 'üë• –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
        await AdminStates.choise_sex.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –Ω–∞–¥–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:', reply_markup=buttons.mailing_specific)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await admin_menu_module(message)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!', reply_markup=buttons.mailing_admin_menu)

# –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
async def choise_sex_for_mailing_to_specific(message: types.Message):
    if message.text == '–î–µ–≤—É—à–∫–∞–º':
        DataBaseWork().set_data_in_table('mailing_to', '–î–µ–≤—É—à–∫–∞–º', message.from_user.id, 'admins')
        await AdminStates.get_mail.set()
        await message.answer('–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ (–∏/–∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º) –¥–ª—è –±—É–¥—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ '
                             '–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.\n\n'
                             '‚ö†Ô∏è –ü—Ä–∏—Å—ã–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –æ –µ–≥–æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.',
                             reply_markup=buttons.cancel_reply,
                             parse_mode='HTML')
    elif message.text == '–ü–∞—Ä–Ω—è–º':
        DataBaseWork().set_data_in_table('mailing_to', '–ü–∞—Ä–Ω—è–º', message.from_user.id, 'admins')
        await AdminStates.get_mail.set()
        await message.answer('–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ (–∏/–∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º) –¥–ª—è –±—É–¥—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ '
                             '–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.\n\n'
                             '‚ö†Ô∏è –ü—Ä–∏—Å—ã–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –æ –µ–≥–æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.',
                             reply_markup=buttons.cancel_reply,
                             parse_mode='HTML')
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await delete_mail(message)

        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
async def get_mail_from_admin(message: types.Message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await delete_mail(message)

        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)
    else:
        if message.photo:
            DataBaseWork().add_photo_or_video_to_admins(message.from_user.id, message.photo[0].file_id)
            DataBaseWork().set_data_in_table('mail_text', message.caption, message.from_user.id, 'admins')
        elif message.video:
            DataBaseWork().add_photo_or_video_to_admins(message.from_user.id, message.video.file_id)
            DataBaseWork().set_data_in_table('mail_text', message.caption, message.from_user.id, 'admins')
        elif message.text:
            DataBaseWork().set_data_in_table('mail_text', message.text, message.from_user.id, 'admins')

        await AdminStates.save_mail.set()
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ. –ù–∞–∂–º–∏—Ç–µ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>, '
                             '—á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.', parse_mode='HTML', reply_markup=buttons.save_or_no)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async def save_mail(message: types.Message):
    if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
        await AdminStates.send_out_mail.set()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=buttons.yes_or_no_send_mail)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await delete_mail(message)

        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')

# –†–∞—Å—Å—ã–ª–∫–∞
# —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–≥–æ
async def send_out_mail(message: types.Message):
    if message.text == '‚úÖ –î–∞':
        all_id = 0

        if DataBaseWork().get_data_from_admins_table('mailing_to', message.from_user.id) == '–í—Å–µ–º':
            all_id = DataBaseWork().get_all_users_id()
        elif DataBaseWork().get_data_from_admins_table('mailing_to', message.from_user.id) == '–î–µ–≤—É—à–∫–∞–º':
            all_id = DataBaseWork().get_all_specific_users_id('–î–µ–≤—É—à–∫–∞–º')
        elif DataBaseWork().get_data_from_admins_table('mailing_to', message.from_user.id) == '–ü–∞—Ä–Ω—è–º':
            all_id = DataBaseWork().get_all_specific_users_id('–ü–∞—Ä–Ω—è–º')


        users_counter = 0
        for i in range(len(all_id)):
            try:
                await bot.send_photo(chat_id=int(all_id[i]),
                                     photo=DataBaseWork().get_data_from_admins_table('photo_video_ids', message.from_user.id),
                                     caption=DataBaseWork().get_data_from_admins_table('mail_text', message.from_user.id))
                users_counter += 1
            except:
                try:
                    await bot.send_video(chat_id=int(all_id[i]),
                                         video=DataBaseWork().get_data_from_admins_table('photo_video_ids', message.from_user.id),
                                         caption=DataBaseWork().get_data_from_admins_table('mail_text', message.from_user.id))
                    users_counter += 1
                except:
                    try:
                        await bot.send_message(chat_id=int(all_id[i]),
                                               text=DataBaseWork().get_data_from_admins_table('mail_text', message.from_user.id))
                        users_counter += 1
                    except:
                        pass

        await message.answer(f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è <b>{users_counter}/{len(all_id)} —á–µ–ª–æ–≤–µ–∫</b>', parse_mode='HTML')
        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)

    elif message.text == '‚ùé –ù–µ—Ç':
        await AdminStates.mailing_choice.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.mailing_admin_menu)

    await delete_mail(message)

async def delete_mail(msg):
    DataBaseWork().set_data_in_table('mailing_to', None, msg.from_user.id, 'admins')
    DataBaseWork().set_data_in_table('photo_video_ids', None, msg.from_user.id, 'admins')
    DataBaseWork().set_data_in_table('mail_text', None, msg.from_user.id, 'admins')

'''******************************************************************************************************************'''

'''*** –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ***'''
'''******************************************************************************************************************'''
async def settings_handler(message: types.Message):
    await settings_module(message, 0)

async def settings_module(msg, flag):
    if msg.text in ['–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']:
        DataBaseWork().set_data_in_table('viewed_ids', '-1', msg.from_user.id, 'admins')

    if msg.text == '–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å' or flag == 1:
        try:
            violator_id = DataBaseWork().find_violator(msg.from_user.id, 'void')
            await output_from_profile(msg.from_user.id, violator_id)

            await AdminStates.settings_warn.set()
            await msg.answer(f'–ù–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É –ø–æ—Å—Ç—É–ø–∏–ª–æ '
                                 f'{DataBaseWork().get_data_from_violators_table(DataBaseWork().get_data_from_admins_table("violators_id", msg.from_user.id), "number_of_complaints")}'
                                 f' –∂–∞–ª–æ–±(-–∞/-—ã)!\n'
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.settings_warn)
        except:
            await AdminStates.settings.set()
            await msg.answer('–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
            await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif msg.text == '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' or flag == 2:
        try:
            violator_id = DataBaseWork().find_violator(msg.from_user.id, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω')
            await output_from_profile(msg.from_user.id, violator_id)

            await AdminStates.settings_block.set()
            await msg.answer(f'–ù–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É –ø–æ—Å—Ç—É–ø–∏–ª–æ '
                                 f'{DataBaseWork().get_data_from_violators_table(DataBaseWork().get_data_from_admins_table("violators_id", msg.from_user.id), "number_of_complaints")}'
                                 f' –∂–∞–ª–æ–±(-–∞)!\n'
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.settings_block)
        except:
            await AdminStates.settings.set()
            await msg.answer('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
            await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif msg.text == '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' or flag == 3:
        try:
            violator_id = DataBaseWork().find_violator(msg.from_user.id, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            await output_from_profile(msg.from_user.id, violator_id)

            await AdminStates.settings_unblock.set()
            await msg.answer(f'–ù–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É –ø–æ—Å—Ç—É–ø–∏–ª–æ '
                                 f'{DataBaseWork().get_data_from_violators_table(DataBaseWork().get_data_from_admins_table("violators_id", msg.from_user.id), "number_of_complaints")}'
                                 f' –∂–∞–ª–æ–±(-–∞)!\n'
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.settings_unblock)
        except:
            await AdminStates.settings.set()
            await msg.answer('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
            await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif msg.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await admin_menu_module(msg)
    else:
        await msg.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')

async def warn(message: types.Message):
    if message.text == '–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å':
        try:
            await bot.send_message(DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
                               '–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n'
                               '–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –±–∞–Ω!')
        except:
            pass

        DataBaseWork().set_data_in_table(
            'status', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω', DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
            'violators')

        DataBaseWork().set_data_in_table(
            'number_of_complaints', 0, DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
            'violators')

        DataBaseWork().set_data_in_table('inactive', -1, DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id), 'users')

        await AdminStates.settings.set()
        await message.answer('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif message.text == '–ü–æ–º–∏–ª–æ–≤–∞—Ç—å':
        DataBaseWork().delete_user_from_violators_table(DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id))
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–∏–ª–æ–≤–∞–Ω!')

        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif message.text == '–î–∞–ª–µ–µ':
        await settings_module(message, 1)

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')

async def block(message: types.Message):
    if message.text == '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å':
        try:
            await bot.send_message(DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
                                   '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
        except:
            pass
        DataBaseWork().set_data_in_table('inactive',
                                         -1,
                                         DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
                                         'users')
        DataBaseWork().set_data_in_table(
            'status', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id),
            'violators')

        DataBaseWork().set_data_in_table('number_of_complaints', 0, message.from_user.id, 'violators')

        await AdminStates.settings.set()
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif message.text == '–ü–æ–º–∏–ª–æ–≤–∞—Ç—å':
        DataBaseWork().delete_user_from_violators_table(DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id))
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–∏–ª–æ–≤–∞–Ω!')

        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif message.text == '–î–∞–ª–µ–µ':
        await settings_module(message, 2)

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')


async def unblock(message: types.Message):
    if message.text == '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å':
        DataBaseWork().delete_user_from_violators_table(DataBaseWork().get_data_from_admins_table('violators_id', message.from_user.id))
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')

        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)

    elif message.text == '–î–∞–ª–µ–µ':
        await settings_module(message, 3)

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await AdminStates.settings.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buttons.settings_admin_menu)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')

async def output_from_profile(self_id, violator_id):
    photo_or_video_id = DataBaseWork().get_data_from_profiles_table('photo_or_video_id', violator_id)

    if DataBaseWork().get_data_from_profiles_table('description', violator_id) == '':
        str = f"{DataBaseWork().get_data_from_profiles_table('user_name', violator_id)}, " \
              f"{DataBaseWork().get_data_from_profiles_table('age', violator_id)}, " \
              f"{DataBaseWork().get_data_from_profiles_table('city', violator_id)}." \
              f"{DataBaseWork().get_data_from_profiles_table('dop_info', violator_id)}"

    else:
        str = f"{DataBaseWork().get_data_from_profiles_table('user_name', violator_id)}, " \
              f"{DataBaseWork().get_data_from_profiles_table('age', violator_id)}, " \
              f"{DataBaseWork().get_data_from_profiles_table('city', violator_id)} - " \
              f"{DataBaseWork().get_data_from_profiles_table('description', violator_id)}.\n" \
              f"{DataBaseWork().get_data_from_profiles_table('dop_info', violator_id)}"


    try:
        await bot.send_photo(chat_id=self_id, photo=photo_or_video_id, caption=str)

    except:
        await bot.send_video(chat_id=self_id,video=photo_or_video_id, caption=str)
'''******************************************************************************************************************'''

'''*** –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" ***'''
'''******************************************************************************************************************'''
async def analytics(msg):
    await msg.answer(f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {DataBaseWork().get_active_users()}\n'
                     f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {DataBaseWork().get_all_users_id()}', reply_markup=buttons.inline_markup_excel)

    await admin_menu_module(msg)

async def is_output_excel(callback: types.CallbackQuery):
    DataBaseWork().read_sql_to_frame()
    try:
        await callback.message.answer_document(open('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.xlsx', 'rb'))
    except:
        pass

    os.remove('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.xlsx')
'''******************************************************************************************************************'''

async def is_menu(message: types.Message):
    if DataBaseWork().is_user_blocked(message.from_user.id) == False:
        if message.text == '/start':
            await start_bot.command_start_module(message)

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —Ñ–∞–π–ª–∞ "admins.py"
def reg_handlers_questionnaire(dp: Dispatcher):
    dp.register_message_handler(first_chocie_handler, state=AdminStates.first_choice)

    dp.register_message_handler(from_user_to_admin, state=AdminStates.user_to_admin)
    dp.register_message_handler(from_admin_to_user, state=AdminStates.admin_to_user)

    dp.register_message_handler(mailing_choice, state=AdminStates.mailing_choice)
    dp.register_message_handler(choise_sex_for_mailing_to_specific, state=AdminStates.choise_sex)
    dp.register_message_handler(get_mail_from_admin, state=AdminStates.get_mail, content_types=['photo', 'video', 'text'])
    dp.register_message_handler(save_mail, state=AdminStates.save_mail)
    dp.register_message_handler(send_out_mail, state=AdminStates.send_out_mail)

    dp.register_message_handler(settings_handler, state=AdminStates.settings)
    dp.register_message_handler(warn, state=AdminStates.settings_warn)
    dp.register_message_handler(block, state=AdminStates.settings_block)
    dp.register_message_handler(unblock, state=AdminStates.settings_unblock)

    dp.register_callback_query_handler(is_output_excel, Text('output_excel'), state=AdminStates.all_states)
    dp.register_message_handler(is_menu, state=AdminStates.all_states)
