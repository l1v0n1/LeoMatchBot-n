from aiogram.dispatcher.filters.state import State, StatesGroup
from work_with_db import DataBaseWork
from handlers import change_mode

import buttons
from handlers import viewing_questionnaires, create_questionnaire
from aiogram import types, Dispatcher

class MenuState(StatesGroup):
    menu = State()

async def menu_handler(message: types.Message):
    if DataBaseWork().is_user_blocked(message.from_user.id) == False:
        await menu_module(message)

async def menu_module(msg):
    if DataBaseWork().is_user_blocked(msg.from_user.id) == False:
        if msg.text == '–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞':
            await viewing_questionnaires.start_check_profiles(msg)

        elif msg.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
            await create_questionnaire.output_from_profile(msg)

        elif msg.text == '‚õë –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º':
            if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins') == True:
                await msg.answer('–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º, —Ç–æ –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n@myster_tgbot',
                                 reply_markup=buttons.menu_admin)
            else:
                await msg.answer('–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º, —Ç–æ –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n@myster_tgbot',
                                 reply_markup=buttons.menu)

        elif msg.text == '‚õî –°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É':
            DataBaseWork().set_data_in_table('inactive', -1, msg.from_user.id, 'users')

            if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins') == True:
                await msg.answer('\nü´∂–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ–ª –≤—Ä–µ–º—è –∏ –Ω–∞—à–µ–ª —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—à—É –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ\!\n'
                                 '\n'
                                 '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ\n—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ üò¢\n'
                                 '–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ üò•\n'
                                 '\n'
                                 '–ù–æ **–¢–´** –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ü•≥\n'
                                 '–ñ–º–∏ __**–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞**__ –∏ –≤–ø–µ—Ä–µ–¥', parse_mode=types.ParseMode.MARKDOWN_V2,
                                 reply_markup=buttons.menu_admin_close)
            else:
                await msg.answer('\nü´∂–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ–ª –≤—Ä–µ–º—è –∏ –Ω–∞—à–µ–ª —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—à—É –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ\!\n'
                                 '\n'
                                 '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ\n—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ üò¢\n'
                                 '–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ üò•\n'
                                 '\n'
                                 '–ù–æ **–¢–´** –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ü•≥\n'
                                 '–ñ–º–∏ __**–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞**__ –∏ –≤–ø–µ—Ä–µ–¥', parse_mode=types.ParseMode.MARKDOWN_V2,
                                 reply_markup=buttons.menu_close)

        elif msg.text == '–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞':
            print(DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins'))
            if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins') == True:
                await change_mode.change_mode_module(msg)
            else:
                # For non-admin users who somehow access this button
                if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins') == True:
                    await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=buttons.menu_admin)
                else:
                    await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=buttons.menu)


def reg_menu_handlers(dp: Dispatcher):
    dp.register_message_handler(menu_handler, state=MenuState.menu)
    
    # Register the handler for common menu commands on all states
    dp.register_message_handler(menu_handler, lambda message: message.text in 
                               ['–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞', 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞', 
                                '‚õî –°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É', '‚õë –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º'], 
                               state="*")



















    # AgACAgIAAxkBAAEOvAVj34rKx2YtpbGeeMDkw7pUzTxy2AACM8QxG-cAAkvNMWp0ESrTPwEAAwIAA3MAAy4E