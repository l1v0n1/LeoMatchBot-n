import asyncio
from aiogram import types
from aiogram.utils import executor
from work_with_db import DataBaseWork
from create_bot import dp, bot
import buttons
from handlers import viewing_questionnaires, create_questionnaire, menu, admin, change_mode, match
from aiogram.dispatcher.filters.state import State, StatesGroup
from threading import Thread, Event
import time
import sqlite3

class StartStates(StatesGroup):
    sleep = State()

# @dp.message_handler(commands='start')
# async def command_start(message: types.Message):
#     await command_start_module(message)

async def command_start_module(msg):
    if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'admins') == False:
        if DataBaseWork().is_exist_user_in_db(msg.from_user.id, 'users') == False:
            await msg.answer('–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–π–¥–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.')

            if msg.from_user.username == None:
                await msg.answer('–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å Username '
                                     '–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–∞—Ç—å\n'
                                     '/start')

                
                await bot.send_message(chat_id=msg.from_user.id,
                                       text='IOS\n\n'
                                             '1. –ù–∞–∂–º–∏—Ç–µ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É\n'
                                             '2. –ù–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n'
                                             '3. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                                             'Android\n\n'
                                             '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 3 –ø–æ–ª–æ—Å–∫–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n'
                                             '2. –ù–∞–∂–º–∏—Ç–µ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n'
                                             '3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è')

            else:
                DataBaseWork().add_user_in_users_table(msg.from_user.id, msg.from_user.username)
                await create_questionnaire.start_myprofile_module(msg)
        else:
            if DataBaseWork().get_data_from_profiles_table('photo_or_video_id', msg.from_user.id) == '':
                await create_questionnaire.start_myprofile_module(msg)
            else:
                await create_questionnaire.output_from_profile(msg)
    else:
        await change_mode.change_mode_module(msg)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º –∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, —Ç–æ –¥–∞–Ω–Ω—ã–π
# —Ö–µ–Ω–¥–ª–µ—Ä –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤ command_start_module(msg)
@dp.message_handler()
async def arbitrary_start(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n'
                        '–ó–¥–µ—Å—å —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏, –≤–æ–∑–º–æ–∂–Ω–æ,'
                        ' –Ω–∞–π–¥–µ—à—å —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É!')
    await command_start_module(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_activity():
    while True:
        try:
            try:
                users_ids = DataBaseWork().get_all_users_id()
                for user_id in users_ids:
                    last_time = DataBaseWork().get_data_from_profiles_table('last_action_time', user_id)
                    user_activity = DataBaseWork().get_data_from_profiles_table('inactive', user_id)
                    if last_time != '' and user_activity == 0:
                        if float(time.time()) - float(last_time) >= float(2.628*10**6):
                            DataBaseWork().set_data_in_table('inactive', -1, user_id, 'users')
                            DataBaseWork().set_data_in_table('last_action_time', time.time(), user_id, 'users')
                            await bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç\! –û—Ç —Ç–µ–±—è –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, '
                                                            '–ø–æ—ç—Ç–æ–º—É —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\.üò≤\n'
                                                            '\n'
                                                            '‚ù§Ô∏è‚Äçüî•–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ—è–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\.üëà\n'
                                                            '\n'
                                                            '–ú–æ–∂–µ—Ç –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞?\n'
                                                            '\n'
                                                            '–ñ–º–∏ __**ü´∞üèº–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞**__ –∏ –≤–ø–µ—Ä–µ–¥ü´∞', parse_mode=types.ParseMode.MARKDOWN_V2)
                time.sleep(float(60*60*24))
            except sqlite3.Error:
                continue
        except Exception:
            continue

if __name__ == '__main__':
    DataBaseWork().create_table_users()
    DataBaseWork().create_admins_table()
    DataBaseWork().create_violators_table()
    
    # Initialize admins from config
    import config
    for admin_id in config.admin_id:
        if not DataBaseWork().is_exist_user_in_db(admin_id, 'admins'):
            print(f"Adding admin with ID {admin_id} to the database")
            DataBaseWork().add_user_in_admins_table(admin_id)

    change_mode.reg_handlers_change_mode(dp=dp)
    viewing_questionnaires.reg_handlers_questionnaire(dp=dp)
    create_questionnaire.reg_handlers_questionnaire(dp=dp)
    menu.reg_menu_handlers(dp=dp)
    admin.reg_handlers_questionnaire(dp=dp)
    match.reg_handlers_match(dp=dp)

    executor.start_polling(dp, skip_updates=True)
    loop = asyncio.get_event_loop()
    loop.create_task(check_activity())